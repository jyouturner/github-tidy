Project Structure:
==================
 |   |  
 |   |  /src
 |   |   |  github_branch_manager
 |   |  /tests



File: ./claude_and_gemini//README.md
===================


# Github Tidy by Claude and Gemini

This project is based on the [Github Tidy](./README.md) project, however, after we asked Gemini-2.0-flush to analyze the two projects, we asked Gemini to improve and complete the project, thus the "claude_and_gemini" project.


File: ./claude_and_gemini//pyproject.toml
===================


[tool.poetry]
name = "github-tidy"
version = "0.1.0"
description = "A tool to manage GitHub branches by archiving inactive ones"
authors = ["Your Name <your.email@example.com>"]
readme = "README.md"
packages = [{include = "github_branch_manager", from = "src"}]

[tool.poetry.dependencies]
python = "^3.8"
PyGithub = "^2.1.1"
python-dotenv = "^1.0.0"
slack-sdk = "^3.21.3"
google-cloud-logging = "^3.5.0"

[tool.poetry.group.dev.dependencies]
pytest = "^7.3.1"
pytest-cov = "^4.1.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.scripts]
github-tidy = "github_branch_manager.main:main" 


File: ./claude_and_gemini//src/github_branch_manager/__init__.py
===================


# Empty __init__.py to mark this as a Python package 


File: ./claude_and_gemini//src/github_branch_manager/branch_manager.py
===================


from datetime import datetime, timedelta, timezone
from typing import List, Optional
from github import Github
from github.Repository import Repository
from github.Branch import Branch
from .config import Config
from .logger import setup_logger
from .notifier import SlackNotifier

logger = setup_logger()

class BranchManager:
    def __init__(self, config: Config):
        self.config = config
        self.github = Github(config.github_token)
        self.org = self.github.get_organization(config.org_name)
        self.notifier = SlackNotifier(config.slack_token, config.slack_channel)

    def is_branch_inactive(self, branch: Branch) -> bool:
        cutoff_date = datetime.now(timezone.utc) - timedelta(days=self.config.inactivity_days)
        last_commit = branch.commit.commit.author.date
        return last_commit < cutoff_date

    def is_branch_merged(self, repo: Repository, branch: Branch) -> bool:
        try:
            for base in self.config.protected_branches:
                pulls = repo.get_pulls(state='closed',
                                     base=base,
                                     head=branch.name)
                if any(pr.merged for pr in pulls):
                    return True
            return False
        except Exception as e:
            logger.error(f"Failed to check merge status for {branch.name}: {e}")
            return False

    def has_open_prs(self, repo: Repository, branch_name: str) -> bool:
        try:
            pulls = repo.get_pulls(state='open', head=branch_name)
            return pulls.totalCount > 0
        except Exception as e:
            logger.error(f"Failed to check PRs for {branch_name}: {e}")
            return True

    def has_critical_tags(self, repo: Repository, branch: Branch) -> bool:
        try:
            import fnmatch
            commit_sha = branch.commit.sha
            for tag in repo.get_tags():
                if tag.commit.sha != commit_sha:
                    continue
                if any(fnmatch.fnmatch(tag.name, p) for p in self.config.critical_tag_patterns):
                    return True
            return False
        except Exception as e:
            logger.error(f"Failed to check tags for {branch.name}: {e}")
            return True

    def should_archive_branch(self, repo: Repository, branch: Branch) -> bool:
        if branch.name in self.config.protected_branches:
            return False
        if branch.name.startswith(self.config.archive_prefix):
            return False
        if not self.is_branch_inactive(branch):
            return False
        if not self.is_branch_merged(repo, branch):
            return False
        if self.has_open_prs(repo, branch.name):
            return False
        if self.has_critical_tags(repo, branch):
            return False
        
        return True

    def should_purge_branch(self, branch: Branch, archive_date: datetime) -> bool:
        cutoff_date = datetime.now(timezone.utc) - timedelta(days=self.config.retention_days)
        return archive_date < cutoff_date

    def archive_branch(self, repo: Repository, branch: Branch) -> None:
        try:
            new_name = f"{self.config.archive_prefix}{branch.name}"
            repo.create_git_ref(
                ref=f"refs/heads/{new_name}",
                sha=branch.commit.sha
            )
            repo.get_git_ref(f"heads/{branch.name}").delete()
            self.notifier.notify_archive(repo.name, branch.name)
            logger.info(f"Archived branch {branch.name} in {repo.name}")
        except Exception as e:
            logger.error(f"Failed to archive {branch.name}: {str(e)}")
    
    def purge_branch(self, repo: Repository, branch: Branch) -> None:
        try:
            repo.get_git_ref(f"heads/{branch.name}").delete()
            self.notifier.notify_deletion(repo.name, branch.name)
            logger.info(f"Purged branch {branch.name} in {repo.name}")
        except Exception as e:
            logger.error(f"Failed to purge {branch.name}: {str(e)}")
            
    def process_branches(self, repo_name: str) -> None:
        repo = self.org.get_repo(repo_name)
        for branch in repo.get_branches():
            if self.should_archive_branch(repo, branch):
                self.archive_branch(repo, branch)

        for branch in repo.get_branches():
            if branch.name.startswith(self.config.archive_prefix):
                try:
                    commit_date = branch.commit.commit.author.date
                    if self.should_purge_branch(branch, commit_date):
                        self.purge_branch(repo, branch)
                except Exception as e:
                    logger.error(f"Failed to process branch {branch.name} for purging: {str(e)}") 


File: ./claude_and_gemini//src/github_branch_manager/config.py
===================


from dataclasses import dataclass
from typing import List
import os
from dotenv import load_dotenv

@dataclass
class Config:
    protected_branches: List[str]
    inactivity_days: int
    retention_days: int
    github_token: str
    org_name: str
    slack_token: str
    slack_channel: str
    archive_prefix: str
    critical_tag_patterns: List[str]
    
    @classmethod
    def from_env(cls) -> 'Config':
        load_dotenv()
        return cls(
            protected_branches=os.getenv('PROTECTED_BRANCHES', 'develop,stage,master').split(','),
            inactivity_days=int(os.getenv('INACTIVITY_DAYS', '30')),
            retention_days=int(os.getenv('RETENTION_DAYS', '60')),
            github_token=os.getenv('GITHUB_TOKEN', ''),
            org_name=os.getenv('GITHUB_ORG', ''),
            slack_token=os.getenv('SLACK_TOKEN', ''),
            slack_channel=os.getenv('SLACK_CHANNEL', '#github-notifications'),
            archive_prefix=os.getenv('ARCHIVE_PREFIX', 'archived/'),
            critical_tag_patterns=os.getenv('CRITICAL_TAG_PATTERNS', 'v*,release-*').split(',')
        ) 


File: ./claude_and_gemini//src/github_branch_manager/logger.py
===================


import logging
from google.cloud import logging as cloud_logging

def setup_logger():
    logger = logging.getLogger('github-branch-manager')
    
    if not logger.handlers:
        logger.setLevel(logging.INFO)
        
        # Cloud Logging handler
        client = cloud_logging.Client()
        cloud_handler = cloud_logging.handlers.CloudLoggingHandler(client)
        cloud_handler.setFormatter(logging.Formatter(
            '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
        ))
        logger.addHandler(cloud_handler)
        
        # Console handler
        console_handler = logging.StreamHandler()
        console_handler.setFormatter(logging.Formatter(
            '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
        ))
        logger.addHandler(console_handler)
    
    return logger 


File: ./claude_and_gemini//src/github_branch_manager/main.py
===================


import os
from .config import Config
from .branch_manager import BranchManager
from .logger import setup_logger

def main():
    logger = setup_logger()
    try:
        config = Config.from_env()
        manager = BranchManager(config)
        
        # Process all repositories in the organization
        for repo in manager.org.get_repos():
            logger.info(f"Processing repository: {repo.name}")
            manager.process_branches(repo.name)
            
    except Exception as e:
        logger.error(f"Failed to process repositories: {str(e)}")
        raise

if __name__ == "__main__":
    main() 


File: ./claude_and_gemini//src/github_branch_manager/notifier.py
===================


from slack_sdk import WebClient
from slack_sdk.errors import SlackApiError
from .logger import setup_logger

logger = setup_logger()

class SlackNotifier:
    def __init__(self, token: str, channel: str):
        self.client = WebClient(token=token)
        self.channel = channel

    def notify_archive(self, repo: str, branch: str) -> None:
        try:
            text = f":file_folder: Branch `{branch}` in repository `{repo}` has been archived"
            self.client.chat_postMessage(channel=self.channel, text=text)
        except SlackApiError as e:
            logger.error(f"Failed to send Slack notification: {str(e)}")

    def notify_deletion(self, repo: str, branch: str) -> None:
        try:
            text = f":wastebasket: Branch `{branch}` in repository `{repo}` has been deleted"
            self.client.chat_postMessage(channel=self.channel, text=text)
        except SlackApiError as e:
            logger.error(f"Failed to send Slack notification: {str(e)}") 


