Project Structure:
==================
 |  claude_only
 |   |  docs
 |   |  src
 |   |   |  github_branch_manager
 |   |  tests



File: ./claude_only/README.md
===================


# Github Tidy by Claude

This project is generated by Claude only.

## Conversation with Claude

[Prompt and Responses from Claude](./docs)

## Project




File: ./claude_only/pyproject.toml
===================


[tool.poetry]
name = "github-tidy"
version = "0.1.0"
description = "A tool to manage GitHub branches by archiving inactive ones"
authors = ["Your Name <your.email@example.com>"]
readme = "README.md"
packages = [{include = "github_branch_manager", from = "src"}]

[tool.poetry.dependencies]
python = "^3.8"
PyGithub = "^2.1.1"
python-dotenv = "^1.0.0"
slack-sdk = "^3.21.3"
google-cloud-logging = "^3.5.0"

[tool.poetry.group.dev.dependencies]
pytest = "^7.3.1"
pytest-cov = "^4.1.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.scripts]
github-tidy = "github_branch_manager.main:main" 


File: ./claude_only/src/github_branch_manager/__init__.py
===================


# Empty __init__.py to mark this as a Python package 


File: ./claude_only/src/github_branch_manager/branch_manager.py
===================


from datetime import datetime, timedelta
from typing import List, Optional
from github import Github
from .config import Config
from .logger import setup_logger
from .notifier import SlackNotifier

logger = setup_logger()

class BranchManager:
    def __init__(self, config: Config):
        self.config = config
        self.github = Github(config.github_token)
        self.org = self.github.get_organization(config.org_name)
        self.notifier = SlackNotifier(config.slack_token)

    def is_branch_inactive(self, branch) -> bool:
        cutoff_date = datetime.now() - timedelta(days=self.config.inactivity_days)
        last_commit = branch.commit.commit.author.date
        return last_commit < cutoff_date

    def should_archive_branch(self, branch) -> bool:
        if branch.name in self.config.protected_branches:
            return False
        if branch.name.startswith('archived/'):
            return False
        return self.is_branch_inactive(branch)

    def archive_branches(self, repo_name: str) -> None:
        repo = self.org.get_repo(repo_name)
        for branch in repo.get_branches():
            if self.should_archive_branch(branch):
                try:
                    new_name = f"archived/{branch.name}"
                    repo.get_git_ref(f"heads/{branch.name}").edit(
                        sha=branch.commit.sha,
                        force=True
                    )
                    self.notifier.notify_archive(repo_name, branch.name)
                    logger.info(f"Archived branch {branch.name} in {repo_name}")
                except Exception as e:
                    logger.error(f"Failed to archive {branch.name}: {str(e)}") 


File: ./claude_only/src/github_branch_manager/config.py
===================


from dataclasses import dataclass
from typing import List
import os
from dotenv import load_dotenv

@dataclass
class Config:
    protected_branches: List[str]
    inactivity_days: int
    retention_days: int
    github_token: str
    org_name: str
    slack_token: str
    
    @classmethod
    def from_env(cls) -> 'Config':
        load_dotenv()
        return cls(
            protected_branches=['develop', 'stage', 'master'],
            inactivity_days=30,
            retention_days=60,
            github_token=os.getenv('GITHUB_TOKEN', ''),
            org_name=os.getenv('GITHUB_ORG', ''),
            slack_token=os.getenv('SLACK_TOKEN', '')
        ) 


File: ./claude_only/src/github_branch_manager/logger.py
===================


import logging
from google.cloud import logging as cloud_logging

def setup_logger():
    logger = logging.getLogger('github-branch-manager')
    
    if not logger.handlers:
        logger.setLevel(logging.INFO)
        
        # Cloud Logging handler
        client = cloud_logging.Client()
        cloud_handler = cloud_logging.handlers.CloudLoggingHandler(client)
        cloud_handler.setFormatter(logging.Formatter(
            '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
        ))
        logger.addHandler(cloud_handler)
        
        # Console handler
        console_handler = logging.StreamHandler()
        console_handler.setFormatter(logging.Formatter(
            '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
        ))
        logger.addHandler(console_handler)
    
    return logger 


File: ./claude_only/src/github_branch_manager/main.py
===================


import os
from .config import Config
from .branch_manager import BranchManager
from .logger import setup_logger

def main():
    logger = setup_logger()
    try:
        config = Config.from_env()
        manager = BranchManager(config)
        
        # Process all repositories in the organization
        for repo in manager.org.get_repos():
            logger.info(f"Processing repository: {repo.name}")
            manager.archive_branches(repo.name)
            
    except Exception as e:
        logger.error(f"Failed to process repositories: {str(e)}")
        raise

if __name__ == "__main__":
    main() 


File: ./claude_only/src/github_branch_manager/notifier.py
===================


from slack_sdk import WebClient
from slack_sdk.errors import SlackApiError
from .logger import setup_logger

logger = setup_logger()

class SlackNotifier:
    def __init__(self, token: str):
        self.client = WebClient(token=token)

    def notify_archive(self, repo: str, branch: str) -> None:
        try:
            text = f":file_folder: Branch `{branch}` in repository `{repo}` has been archived"
            self.client.chat_postMessage(channel="#github-notifications", text=text)
        except SlackApiError as e:
            logger.error(f"Failed to send Slack notification: {str(e)}")

    def notify_deletion(self, repo: str, branch: str) -> None:
        try:
            text = f":wastebasket: Branch `{branch}` in repository `{repo}` has been deleted"
            self.client.chat_postMessage(channel="#github-notifications", text=text)
        except SlackApiError as e:
            logger.error(f"Failed to send Slack notification: {str(e)}") 


